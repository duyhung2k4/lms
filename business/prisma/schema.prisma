datasource db {
  url = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output = "../src/generated/prisma"
}

model users {
  id BigInt @db.BigInt @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  username String @unique
  hash_assword String

  profile_id BigInt @db.BigInt @unique
  profile profiles @relation(fields: [profile_id], references: [id])

  role_users role_users[]
}

model profiles {
  id BigInt @db.BigInt @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  first_name String
  last_name String
  email String @unique
  phone String @unique

  user users?
  departments departments[]
  centificates centificates[]
  slot_section_classes slot_section_classes[]

}


model roles {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  name String
  code String @unique

  role_users role_users[]
  role_screens role_screens[]
  role_permissions role_permissions[]
}

model permissions {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  api String @unique
  description String

  role_permissions role_permissions[]
}


model screens {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  name String
  key String
  description String

  role_screens role_screens[]
}

model departments {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  name String
  code String @unique
  description String

  owner_id BigInt
  user profiles @relation(fields: [owner_id], references: [id])
  majors majors[]
}

model majors {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  name String
  code String @unique
  description String

  department_id Int
  department departments @relation(fields: [department_id], references: [id])
  timeline timelines[]
}

model timelines {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  name String
  description String

  major_id Int
  major majors @relation(fields: [major_id], references: [id])

  timeline_groupsubjects timeline_groupsubjects[]
}

model group_subjects {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  name String
  code String @unique
  description String

  subject_groupsubjects subject_groupsubjects[]
  timeline_groupsubjects timeline_groupsubjects[]
}

model subjects {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  name String
  code String @unique
  description String
  number_of_credit Int

  section_class section_classes[]
  centificates centificates[]
  subject_groupsubjects subject_groupsubjects[]
}

model section_classes {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  name String
  code String @unique
  description String
  start_time DateTime
  end_time DateTime

  subject_id Int
  subject subjects @relation(fields: [subject_id], references: [id])

  slot_section_classes slot_section_classes[]
}

model centificates {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  profile_id BigInt @db.BigInt
  profile profiles @relation(fields: [profile_id], references: [id])
  subject_id Int
  subject subjects @relation(fields: [subject_id], references: [id])
  slot_section_class_id BigInt @db.BigInt @unique
  slot_section_class slot_section_classes @relation(fields: [slot_section_class_id], references: [id])
}

// ref:
model role_permissions {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  role_id Int
  role roles @relation(fields: [role_id], references: [id])
  permission_id Int
  permission permissions @relation(fields: [permission_id], references: [id])
}

model role_users {
  id BigInt @id @default(autoincrement()) @db.BigInt
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  role_id Int
  role roles @relation(fields: [role_id], references: [id])
  user_id BigInt @db.BigInt
  user users @relation(fields: [user_id], references: [id])
}

model role_screens {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  role_id Int
  role roles @relation(fields: [role_id], references: [id])
  screen_id Int
  screen screens @relation(fields: [screen_id], references: [id])
}

model slot_section_classes {
  id BigInt @id @default(autoincrement()) @db.BigInt
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  code String @unique

  section_class_id Int
  section_class section_classes @relation(fields: [section_class_id], references: [id])
  register_id BigInt @db.BigInt
  register profiles @relation(fields: [register_id], references: [id])
  centificate centificates?
}

model subject_groupsubjects {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  group_subject_id Int
  group_subject group_subjects @relation(fields: [group_subject_id], references: [id])
  subject_id Int
  subject subjects @relation(fields: [subject_id], references: [id])
}

model timeline_groupsubjects {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  timeline_id Int
  timeline timelines @relation(fields: [timeline_id], references: [id])
  group_subject_id Int
  group_subject group_subjects @relation(fields: [group_subject_id], references: [id])
}